/**
 * A module to interact with Google Analytics API.
 *
 * You give this module your Google client ID, client secret,
 * and redirect URL, and it'll do things with Google Analytics API
 * and Google OAuth 2.0 login.
 *
 * @namespace ogGaApi
 */
// Todo: Validate ID Tokens using Google's public certificates

var request = require('request');
var qs = require('querystring');



/**
 * Instantiate an object with the following parameters. These parameters are configured in {@link server.config}
 *
 * @param clientId {string} Google API client ID
 * @param clientSecret {string} Google API client secret
 * @param redirectUrl {string} The redirect URL as in your Google API console settings. Should be absolute URL.
 *
 * @function ogGaApi#OgGaApi
 * @returns {object}
 */
function OgGaApi(clientId, clientSecret, redirectUrl) {
  this.clientId = clientId;
  this.clientSecret = clientSecret;
  this.redirectUrl = redirectUrl;

  return this;
}



/**
 * Returns a string that a user could follow to authenticate with Google OAuth 2.0.
 *
 * @param [csrf] {string} An optional anti cross site request forgery token. In opengash, such token can
 * be generated by {@link ogUtil.csrf}
 *
 * @function ogGaApi#url
 * @returns {string} A Google OAuth 2.0 compatible URL
 */
OgGaApi.prototype.url = function (csrf) {
  var params = {
    client_id: this.clientId,
    response_type: "code",
    scope: "email https://www.googleapis.com/auth/analytics.readonly https://www.googleapis.com/auth/userinfo.profile",
    redirect_uri: this.redirectUrl
  }
  if (csrf) params.state = "csrf=" + csrf;
  if (process.env.NODE_ENV !== 'production') params.prompt = 'consent';

  return "https://accounts.google.com/o/oauth2/auth?" + qs.stringify(params);
}



/**
 * Uses the supplied `code` parameter to POST an access token request to Google
 *
 * @param code {string} the code which will be returned as a GET parameter to the redirect
 * URL specified in your {@link server.config}
 *
 * @param callback {function} A callback function that is given:
 *
 * * `err`: is a JavaScript error object
 * * `res`: is a Node.js response object
 * * `body`: JSON string that needs to be parsed
 *
 * @function ogGaApi#requestAccessToken
 *
 * @todo Maybe use a Promise instead of a callback?
 */
OgGaApi.prototype.requestAccessToken = function (code, callback) {
  var params = {
    code: code,
    client_id: this.clientId,
    client_secret: this.clientSecret,
    redirect_uri: this.redirectUrl,
    grant_type: 'authorization_code'
  }
  var url = "https://accounts.google.com/o/oauth2/token";

  request.post({url: url, form: params}, function (err, res, body) {
    callback(err, res, body);
  });
}



/**
 * This is a general-purpose method that makes it easy to communicate with Google API.
 *
 * @param accessToken {string} The access token obtained from {@link ogGaApi#requestAccessToken}
 * @param apiUrl {string} The API end-point that you want to query.
 * @param callback {string} A callback to do something with the results. The parameters passed
 * to the callback are:
 *
 * * `err`: JavaScript error object
 * * `res`: Node.js response object
 * * `body`: JSON string that needs to be parsed.
 *
 * @function ogGaApi#call
 *
 * @todo: Use a Promise instead of a callback?
 */
OgGaApi.prototype.call = function (accessToken, apiUrl, callback) {
  var qs = {access_token: accessToken};
  request.get({url: apiUrl, qs: qs}, function (err, res, body) {
    callback(err, res, body);
  });
}

module.exports = OgGaApi;